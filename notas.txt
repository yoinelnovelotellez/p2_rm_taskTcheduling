
Opciones organizacion de tareas
	- Maquinas de estados finitos
	- Arboles de comportamiento

Pensar tarea en 2 semanas (a ser posible que pueda probarse en robot real)


Solo implementado sin utilizar organizacion de tareas: nota <=7
Con arbol de comportamiento o maquina de estados: nota <= 8
Para mas de 8: Implementar tanto arbol como maquina de estados y utilizar vision!! -> NO EXIGE PROBAR EN ROBOT REAL. DEPENDE DEL TRABAJO DEDICADO A LA TAREA. PUEDE OPTARSE AL 10 UTILIZANDO SOLO UNA DE LAS ESTRUCTURAS


El stack de navegacion de ROS permite indicarle al robot unas coordenadas de un mapa y, conociendo mapa y pos. actual, navegara hasta el destino por ruta corta y evitando obstaculos



#######################################
#N O T A S   A R B O L E S   D E   C O M P O  R T A M I E N T O #
#######################################

OJO! El arbol exige tiempos de reaccion, son sincronos y si una tarea requiere excesivo tiempo, se cortara y volvera al estado inicial
comportamientos mas a la izq tienen mas prioridad

Decoradores: Modificar el comportamiento de selectores o de bloques que administran secuencias (de waypoints, por ejemplo)

Los nodos devuelven 3 estados: Success, failure y running



######################################
http://bit.ly/robots-moviles-UA -> alternativa: turtlebot_in_stage.launch



###########################################
###################################################
###########################################

Para publicar goals:
rostopic pub /move_base_simple/goal geometry_msgs/PoseStamped '{header: {stamp: now, frame_id: "map"}, pose: {position: {x: 1.0, y: 0.0, z: 0.0}, orientation: {w: 1.0}}}'


Tutorial con turtlesim para guiar a la tortuga... solo vale para espacios vacios??
http://wiki.ros.org/turtlesim/Tutorials/Go%20to%20Goal

Tutorial publicaciÃ³n de gals:
http://wiki.ros.org/navigation/Tutorials/SendingSimpleGoals



CREACION DE MAPA
MIRAR PR0 -> Crear paquete, meter dentro los archivos del turtlebot_gazebo, coger mapa creado ("mapa", .config y .sdf) y pegar los 3 archivos en la carpeta launch. Indicar el .sdf en "turtlebot_world.launch".

Tutorial suscribirse topics imagen (c++): http://wiki.ros.org/image_transport/Tutorials/SubscribingToImages 
Paquete con herramientas de OpenCV: http://wiki.ros.org/opencv_apps
	7. Image filter nodes
		7.1. rgb_color_filter

Crear paquete para nodo C++ de arriba:
	catkin_create_pkg thresholder cv_bridge image_transport roscpp sensor_msgs std_msgs

Anadir al CMakeLists.txt (haiendo llamado al codig de nodo "image_subscriber.cpp"):
	add_executable(image_subscriber src/image_subscriber.cpp)
	target_link_libraries(image_subscriber ${OpenCV_LIBS} ${catkin_LIBRARIES})
	add_dependencies(image_subscriber thresholder)

Lo de anadir al CMakeLists lo extrage de https://answers.ros.org/question/286128/cv_bridge-tutorial-example-not-compiling-in-ros-kinetic-and-ubuntu-1604/

Herramienta para coger valoes de HSV: 
	https://alloyui.com/examples/color-picker/hsv
	OJO! OpenCV y la herramienta notienen los mismos valores
	OpenCV: el H va de 0 a 180 y S y V van de 0 a 255
	alloyui: el H va de 0 a 359 y S y V van de 0 a 100
	
	Alloyui:
		Rojo: 0, 100, 100 -> H de 0 a 40 y de 310 a 359
		Verde: 120, 100, 100 -> H de 70 a 150
		Azul: 240, 100, 100 -> H de 160 a 260
		S: de 50 a 100
		V: de 40 a 100
	OpenCV
		Rojo: de 0 a 20.055710306406684 y de 155.4317548746518 a 180
		Verde: de 35.0974930362117 a 75.20891364902506
		Azul: de 80.22284122562674 a 130.36211699164346
		S: de 127.5 a 255
		V: de 102 a 255
	EXTRA: Calculadora regla de 3: https://es.calcuworld.com/calculadoras-matematicas/calculadora-de-regla-de-tres/
	
	Umbralizacion en codigo: https://docs.opencv.org/3.4/da/d97/tutorial_threshold_inRange.html
